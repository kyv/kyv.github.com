---
layout: post
title: "audio cat"
date: 2012-11-25 19:41
comments: true
categories: audio perl hacks
---

{% img left http://www.flujos.org/images/ncmpc-hora.png "La hora en la lista" %}
Para aquellos momentos cuando es necesario generar un audio en base de dos otros. Claro lo mas f치cil seria con **cat**: ```cat hora.ogg minuto.ogg > horayminuto.ogg```

Pero, por el cuesti칩n de las cabeceras, algunas reproductores de audio no reproducen el resultado final. Por eso escribimos un script que concatena dos audios, utilizando las cabeceras de la primera y corrija la cabecera que refiere al duraci칩n del audio. 
<!-- more -->

Se puede utilizarlo en conjunto con un reproductor, por [ejemplo con mpd](http://www.flujos.org/blog/Locucion_de_hora-mpdcron/ "Con MPD"), para *automatizar* reproducci칩n de la hora actual.



{% codeblock audiocat.pl %}

use strict; 
use warnings; 
die "Not Enough arguments\n" if $#ARGV+1 < 1;

my $horalib="/usr/share/spxcat/audio";
my $fmt="ogg"; # "spx" for speex
my ($hour, $min) = &get_time;

my ($outfile) = @ARGV; #get outfile from cmd line
my $cmdstr ="";
my $cmdopts ="";
my $hour_file = "$horalib/HRS$hour.$fmt"; 
my $min_file = "$horalib/MIN$min.$fmt"; 
print "[$hour_file:$min_file]\n";

if ($fmt eq "ogg") {
    $cmdstr = "ogg";
} 
if ($fmt eq "spx") {
    $cmdstr = "speex";
} 
if ($min ne " ")
    {
        &oggcat;
    } else { #hora en punto
        
	my $cmd = join(" ", ("/bin/cp", $hour_file, $outfile));
        system ("$cmd") == 0 or die "Cannot open pipe to $cmd ($?): $!";

    }

sub oggcat {
    my $out_size; 
    my $count = 0;
    &ogg_dec($hour_file, 1); 
    &ogg_dec($min_file, 0); 
    
    my @tmps = ("/tmp/oggout0.wav", "/tmp/oggout1.wav");
    for (@tmps) 
    {
    
       $out_size += -s $_ || die "cant get out_size: $!\n";
    }
    open IN1, '<', "/tmp/oggout1.wav" || die "Can't open file tmpfile: $!\n";
    open IN2, '<', "/tmp/oggout0.wav" || die "Can't open file tmpfile: $!\n";
    open OUT, '>', "/tmp/oggout.wav" || die "Can't open file $outfile\n";
    
    # important info for headers
    my $data_size = $out_size - 88; # 44 bits * 2 files 
    my $fs_8 = $out_size - 16; # 8 bits * 2 files
    
    # step through header
    my $buffer;
    read IN1, $buffer,4 ;
    print OUT $buffer;
    read IN1, $buffer,4;
    print OUT pack("V",$fs_8);
    read IN1, $buffer,32;
    print OUT $buffer;
    print OUT pack("V",$data_size);
    # write out the rest
    print OUT $_ while <IN1>;
    seek IN2, 44, 0;
    print OUT $_ while <IN2>;
    
    close IN1;
    close IN2;
    close OUT;
    &ogg_enc($outfile);
    unlink glob "/tmp/oggout*";
}

sub ogg_dec {
    my $file = shift;
    my $i = shift;
    my $out = "/tmp/oggout" . $i . ".wav";
    if ($fmt eq 'ogg'){$out = "-o". $out} 
    my $cmd = $cmdstr. "dec";
    my $string = join(" ", ($cmd, $file, $out));
    print "cmd: $string\n";
    my $pid = open PIPE, "-|";
    die "Cannot fork $!" unless defined $pid;
    unless ( $pid ) {
        exec "$string" or die "Cannot open pipe to $cmd: $!";
    }
    my @pipe;
    for (<PIPE>){push(@pipe,$_); }
    return @pipe;
}

sub ogg_enc {
    my $file = shift;
    if ($fmt eq 'ogg'){$file = "-o". $file} 
    my $cmd = $cmdstr. "enc";
    my $string = join(" ", ($cmd, "/tmp/oggout.wav", $file));
    my $pid = open PIPE, "-|";
    die "Cannot fork $!" unless defined $pid;
    unless ( $pid ) {
        exec "$string" or die "Cannot open pipe to $cmd: $!";
    }
    my @pipe;
    for (<PIPE>){push(@pipe,$_); }
    return @pipe;
}

sub get_time
{
    my @timeData = localtime(time);
    my $min = $timeData[1];
    my $hour = $timeData[2];
    if($hour eq "0") {$hour = "12"};
    for ($hour, $min) {
       if(length($_) == 1){$_ = "0" . $_};
    }
    if ($min eq "00") 
    {
        $hour = $hour . "_0";
        $min = " ";
    }
    return ($hour, $min);
}
{% endcodeblock %}
